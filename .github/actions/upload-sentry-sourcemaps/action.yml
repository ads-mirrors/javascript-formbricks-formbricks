name: 'Upload Sentry Sourcemaps'
description: 'Extract sourcemaps from Docker image and upload to Sentry'

inputs:
  docker_image:
    description: 'Docker image to extract sourcemaps from'
    required: true
  release_version:
    description: 'Sentry release version (e.g., v1.2.3)'
    required: true
  sentry_auth_token:
    description: 'Sentry authentication token'
    required: true
  environment:
    description: 'Sentry environment (e.g., production, staging)'
    required: false
    default: 'staging'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract sourcemaps from Docker image
      shell: bash
      run: |
        set -euo pipefail
        echo "üì¶ Extracting sourcemaps from Docker image: ${{ inputs.docker_image }}"

        # Create temporary container from the image and capture its ID
        echo "Creating temporary container..."
        CONTAINER_ID=$(docker create "${{ inputs.docker_image }}")
        echo "Container created with ID: $CONTAINER_ID"

        # Set up cleanup function to ensure container is removed on script exit
        cleanup_container() {
          # Capture the current exit code to preserve it
          local original_exit_code=$?
          
          echo "üßπ Cleaning up Docker container..."
          
          # Remove the container if it exists (ignore errors if already removed)
          if [ -n "$CONTAINER_ID" ]; then
            docker rm -f "$CONTAINER_ID" 2>/dev/null || true
            echo "Container $CONTAINER_ID removed"
          fi
          
          # Exit with the original exit code to preserve script success/failure status
          exit $original_exit_code
        }
        
        # Register cleanup function to run on script exit (success or failure)
        trap cleanup_container EXIT

        # Extract .next directory containing sourcemaps
        docker cp "$CONTAINER_ID:/home/nextjs/apps/web/.next" ./extracted-next

        # Verify .next directory structure exists
        if [ ! -d "./extracted-next" ]; then
          echo "‚ùå Error: .next directory not found in Docker image"
          echo "Expected structure: /home/nextjs/apps/web/.next/"
          exit 1
        fi

        echo "üîç Scanning for sourcemaps in entire .next directory..."

        # Count sourcemaps in all locations within .next directory
        total_sourcemap_count=$(find ./extracted-next -name "*.map" 2>/dev/null | wc -l || echo "0")
        static_sourcemap_count=$(find ./extracted-next/static -name "*.map" 2>/dev/null | wc -l || echo "0")
        server_sourcemap_count=$(find ./extracted-next/server -name "*.map" 2>/dev/null | wc -l || echo "0")

        echo "‚úÖ Found $total_sourcemap_count total sourcemap files in .next directory"
        echo "  ‚îî‚îÄ‚îÄ $static_sourcemap_count in /static directory"
        echo "  ‚îî‚îÄ‚îÄ $server_sourcemap_count in /server directory"

        # Show breakdown by subdirectory for debugging
        echo ""
        echo "üìÇ Sourcemap distribution by directory:"
        find ./extracted-next -name "*.map" 2>/dev/null | sed 's|./extracted-next/||' | cut -d'/' -f1 | sort | uniq -c | sort -nr

        if [ "$total_sourcemap_count" -eq 0 ]; then
          echo "‚ùå Error: No sourcemap files found in .next directory."
          echo "Check that productionBrowserSourceMaps is enabled and Sentry plugin is configured correctly."
          exit 1
        fi

        echo ""
        echo "üéØ Expected ~553 sourcemap files based on build output. Found: $total_sourcemap_count"

    - name: Install Sentry CLI
      shell: bash
      run: |
        echo "Installing Sentry CLI..."
        npm install -g @sentry/cli
        echo "‚úÖ Sentry CLI installed"

    - name: Create Sentry release and upload sourcemaps
      shell: bash
      env:
        SENTRY_AUTH_TOKEN: ${{ inputs.sentry_auth_token }}
      run: |
        set -euo pipefail
        echo "üì§ Creating Sentry release and uploading sourcemaps..."
        
        RELEASE_VERSION="${{ inputs.release_version }}"
        ENVIRONMENT="${{ inputs.environment }}"
        
        echo "Release version (must match app SENTRY_RELEASE): $RELEASE_VERSION"
        
        echo "Creating Sentry release: $RELEASE_VERSION"
        sentry-cli releases new "$RELEASE_VERSION" \
          --org formbricks \
          --project formbricks-cloud
        
        echo "Uploading sourcemaps (exactly like local test)..."
        sentry-cli sourcemaps upload \
          --release="$RELEASE_VERSION" \
          --org=formbricks \
          --project=formbricks-cloud \
          --url-prefix="app:///_next/" \
          ./extracted-next/
        
        echo "Setting release environment to: $ENVIRONMENT"
        sentry-cli releases set-commits "$RELEASE_VERSION" --auto \
          --org formbricks \
          --project formbricks-cloud || echo "Warning: Could not set commits (this is OK)"
        
        echo "Deploying release..."
        sentry-cli releases deploys "$RELEASE_VERSION" new \
          --env "$ENVIRONMENT" \
          --org formbricks \
          --project formbricks-cloud
        
        echo "Finalizing release..."
        sentry-cli releases finalize "$RELEASE_VERSION" \
          --org formbricks \
          --project formbricks-cloud
        
        echo "‚úÖ Sourcemap upload completed successfully!"

    - name: Clean up extracted files
      shell: bash
      if: always()
      run: |
        set -euo pipefail
        # Clean up extracted files
        rm -rf ./extracted-next
        echo "üßπ Cleaned up extracted files"
