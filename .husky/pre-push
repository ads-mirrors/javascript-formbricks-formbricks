#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# ============================================================================
# PR Size Check Hook
# ============================================================================
#
# PURPOSE:
#   Checks the total size of your branch changes before pushing to help keep
#   PRs small, reviewable, and maintainable. This hook is informational only
#   and does NOT block your push.
#
# WHY IT MATTERS:
#   - Large PRs are harder to review and increase merge conflicts
#   - Smaller PRs lead to faster feedback and cleaner merges
#   - Aim for ~300-500 lines of actual code per PR
#
# WHAT IT CHECKS:
#   - Compares your entire branch against main (not just this push)
#   - Counts actual code changes (additions + deletions)
#   - Shows the total PR size that reviewers will see
#
# WHAT'S EXCLUDED (doesn't count toward PR size):
#   - Test files (*.test.ts, *.spec.tsx, etc.)
#   - Locale files (locales/*.json, i18n/*.json)
#   - Lock files (pnpm-lock.yaml, package-lock.json)
#   - Generated files (dist/, coverage/, build/, .next/)
#   - Storybook stories (*.stories.tsx)
#   - Build artifacts (*.tsbuildinfo)
#
# THRESHOLDS:
#   - 500 lines: Gentle warning (push continues automatically)
#   - 800 lines: Strong warning with confirmation prompt
#
# CUSTOMIZATION:
#   Edit WARNING_THRESHOLD and CRITICAL_THRESHOLD below to adjust limits
#   Add patterns to the case statement to exclude more file types
#
# BYPASSING:
#   Use: git push --no-verify
#   (Only when large PRs are justified: migrations, dependency updates, etc.)
#
# PR SIZE BEST PRACTICES:
#   1. Split work into self-contained tasks before starting
#   2. Each PR should have a single, clear purpose
#   3. Branch off PR branches to handle dependencies without blocking
#   4. Communicate clearly if a large PR is unavoidable
#
# INSTALLATION:
#   This hook is managed by Husky and auto-installs with: pnpm install
#
# ============================================================================

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Thresholds
WARNING_THRESHOLD=500
CRITICAL_THRESHOLD=800

echo "${BLUE}üîç Checking PR size...${NC}"

# Get the current branch
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Don't check if we're on main or master
if [ "$current_branch" == "main"]; then
    echo "${GREEN}‚úì On main branch, skipping PR size check${NC}"
    exit 0
fi

# Find the merge base with main (or origin/main)
if git rev-parse --verify main >/dev/null 2>&1; then
    base_branch="main"
elif git rev-parse --verify origin/main >/dev/null 2>&1; then
    base_branch="origin/main"
else
    echo "${YELLOW}‚ö†Ô∏è  Could not find main branch, skipping PR size check${NC}"
    exit 0
fi

# Get the diff stats for ALL changes in the branch (not just this push)
# This shows the total PR size - what reviewers will see
diff_output=$(git diff --numstat "$base_branch"...HEAD)

# Count lines, excluding:
# - Test files (*.test.ts, *.spec.ts, *.test.tsx, *.spec.tsx, etc.)
# - Locale files (locales/*.json, i18n/*.json)
# - Lock files (pnpm-lock.yaml, package-lock.json, yarn.lock)
# - Generated files (dist/, coverage/, build/)
# - Storybook stories (*.stories.tsx, *.stories.ts)

total_additions=0
total_deletions=0
counted_files=0
excluded_files=0

while IFS=$'\t' read -r additions deletions file; do
    # Skip if additions or deletions are "-" (binary files)
    if [ "$additions" = "-" ] || [ "$deletions" = "-" ]; then
        continue
    fi
    
    # Check if file should be excluded
    case "$file" in
        *.test.ts|*.test.tsx|*.spec.ts|*.spec.tsx|*.test.js|*.test.jsx|*.spec.js|*.spec.jsx)
            excluded_files=$((excluded_files + 1))
            continue
            ;;
        */locales/*.json|*/i18n/*.json)
            excluded_files=$((excluded_files + 1))
            continue
            ;;
        pnpm-lock.yaml|package-lock.json|yarn.lock)
            excluded_files=$((excluded_files + 1))
            continue
            ;;
        dist/*|coverage/*|build/*|node_modules/*|test-results/*|playwright-report/*|.next/*)
            excluded_files=$((excluded_files + 1))
            continue
            ;;
        *.stories.ts|*.stories.tsx|*.stories.js|*.stories.jsx)
            excluded_files=$((excluded_files + 1))
            continue
            ;;
        *.tsbuildinfo)
            excluded_files=$((excluded_files + 1))
            continue
            ;;
    esac
    
    total_additions=$((total_additions + additions))
    total_deletions=$((total_deletions + deletions))
    counted_files=$((counted_files + 1))
done <<EOF
$diff_output
EOF

total_changes=$((total_additions + total_deletions))

echo "${BLUE}üìä Changes analysis:${NC}"
echo "   Counted files: $counted_files"
echo "   Excluded files: $excluded_files (tests, locales, locks, generated)"
echo "   Total additions: ${GREEN}+$total_additions${NC}"
echo "   Total deletions: ${RED}-$total_deletions${NC}"
echo "   Total changes: $total_changes lines"
echo ""

# Check against thresholds
if [ $total_changes -ge $CRITICAL_THRESHOLD ]; then
    echo "${RED}‚ö†Ô∏è  WARNING: Your PR is quite large (${total_changes} lines)${NC}"
    echo "${RED}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    echo "Large PRs are harder to review and increase merge conflicts."
    echo "Consider splitting this into smaller, self-contained PRs."
    echo ""
    echo "${YELLOW}üí° Tips:${NC}"
    echo "   ‚Ä¢ Aim for ~300-500 lines of actual code changes"
    echo "   ‚Ä¢ Split by feature, module, or logical boundary"
    echo "   ‚Ä¢ Create dependent PRs by branching off PR branches"
    echo ""
    echo "${BLUE}Need help splitting this PR?${NC}"
    echo "Ask your AI assistant: ${GREEN}'Can you help me split this PR into smaller ones?'${NC}"
    echo ""
    
    # Ask if they want to continue
    printf "Do you want to proceed with the push anyway? [y/N] "
    read -r REPLY
    echo ""
    if [ "$REPLY" != "y" ] && [ "$REPLY" != "Y" ]; then
        echo "${YELLOW}Push cancelled. Use 'git push --no-verify' to skip this check.${NC}"
        exit 1
    fi
    echo "${GREEN}Proceeding with push...${NC}"
    
elif [ $total_changes -ge $WARNING_THRESHOLD ]; then
    echo "${YELLOW}‚ö†Ô∏è  Notice: Your PR is getting large (${total_changes} lines)${NC}"
    echo "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    echo "You're approaching the recommended limit (~500 lines)."
    echo "Consider if this can be split into smaller PRs."
    echo ""
    echo "${BLUE}Proceeding with push... (use 'git push --no-verify' to skip this check)${NC}"
    echo ""
else
    echo "${GREEN}‚úì PR size looks good!${NC}"
    echo ""
fi

exit 0

